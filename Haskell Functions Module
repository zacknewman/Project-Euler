{- |
Module      : ProjectEuler
Description : Project Euler functions
Copyright   : (c) Zack Newman
License     :

Maintainer  : zacknewman22@gmail.com
Stability   : stable
Portability : portable

The ProjectEuler module contains functions to calculate some of the problems
from Project Euler.
-}

module ProjectEuler where

-- |The sumConsecNumbers function returns the sum of the first n numbers
-- beginning from i. The only parameter that requires a positive integer is n.
-- The function is defined over the Fractional class for the other two
-- parameters. The function returns the sum of i, i + j, i + 2*j,...,
-- i + (n - 1)*j.
sumConsecNumbers      :: (Fractional a) => a -> Integer -> a -> a
sumConsecNumbers i n j = (m + 1) * i + (m ^ (2::Integer) + m) * j / 2
    where m = fromIntegral (n - 1)

-- |The fibAll function creates the infinite list of Fibonacci integers.
fibAll :: [Integer]
fibAll  = 0:1:zipWith (+) fibAll (tail fibAll)

-- |The factorization function creates the unsorted list of the prime
-- factorization of any positive integer. This function is a rather simple
-- implementation that can be greatly improved
-- (e.g., general number field sieve), and so should only be
-- used for integers up to 20-digits in length.
factorization  :: Integer -> [Integer]
factorization 1 = []
factorization n = p:factorization (n `div` p)
    where (m, p) = (round $ sqrt (fromIntegral n::Double), head $ filter (\ x ->
                    n `mod` x == 0) ((2:3:[5,11..m]) ++ [7,13..m] ++ [n]))

-- |The toDigits function maps a non-negative integer to the list of the
-- integer's digit(s).
toDigits       :: Integer -> [Integer]
toDigits n
    | n < 0     = error "Argument must be a non-negative integer."
    | n > 9     = toDigits i ++ [j]
    | otherwise = [n]
        where (i, j) = n `divMod` 10

-- |The palindromicNumber function tests if a non-negative integer is a
-- palindromic integer.
palindromicNumber  :: Integer -> Bool
palindromicNumber n = toDigits n == reverse (toDigits n)

-- |The palindromeProduct produces the largest palindromic integer that is a
-- product of two non-negative n-digit integers.
palindromeProduct :: Integer -> Integer
palindromeProduct n = maximum $ filter palindromicNumber xs
    where xs = [i * j | i <- [10 ^ (n - 1)..10 ^ n - 1], j <- [10 ^ (n - 1)..10
                ^ n - 1]]

-- |The prime function tests if an integer is prime. This is a very
-- simple function; consequently this function may take a lot of time
-- to compute if the number exceeds 20 digits. In the case of very large
-- integers one must employ sieve theory techniques.
prime  :: Integer -> Bool
prime n = [n] == factorization n

-- |The listPrimes function produces an unsorted list of all primes
-- bounded by an integer.
listPrimes     :: Integer -> [Integer]
listPrimes n
    | n < 2     = []
    | n == 2    = [2]
    | otherwise = filter prime ((2:3:[5,11..n]) ++ [7,13..n])

-- |The allPrimes function produces the list of all primes.
allPrimes :: [Integer]
allPrimes  = filter prime (2:[3,5..])

-- |The smallestMultiple function produces the smallest integer that is a
-- multiple of every integer from 1 to n.
smallestMultiple  :: Integer -> Integer
smallestMultiple n = foldl f 1 $ listPrimes n
    where f = \ q p -> p ^ (floor $ log (fromIntegral n::Double) / log
              (fromIntegral p::Double)::Integer) * q

-- |The sumConsecSquares function returns the sum of the first n number
-- of squares beginning from i. The only parameter that requires a positive
-- integer is n. The function is defined over the Fractional class
-- for the other two parameters. The function returns the sum of squares of
-- i, i + j, i + 2*j,..., i + (n - 1)*j.
sumConsecSquares      :: (Fractional a) => a -> Integer -> a -> a
sumConsecSquares i n j = (m + 1) * i ^ x + (m ^ x + m) * i * j + (2 * m ^ y + 3
                         * m ^ x + m) * j ^ x / 6
    where (x, y, m) = (2::Integer, 3::Integer, fromIntegral (n - 1))

-- |The digitProduct function returns the largest product of m
-- consecutive digits in n.
digitProduct    :: Int -> Integer -> Integer
digitProduct m n = maximum $ f m $ toDigits n
    where f = \ i xs -> if length xs < m then [] else product (take i xs):f i
              (drop 1 xs)

-- |The pythagoreanTriple function returns the tuple containing the
-- primitive Pythagorean triple based on two inputted integers. It is the
-- implementation of the Pythagorean Triples Theorem. The parameters
-- s and t need to be odd integers such that s > t >= 1.
pythagoreanTriple  :: (Integral a) => a -> a -> [a]
pythagoreanTriple s t = [s * t, (s ^ i - t ^ i) `div` 2, (s ^ i + t ^ i) `div`
                        2]
    where i = 2::Integer

-- |The pythagoreanTripleBoundSum function returns the tuple containing
-- the Pythagorean triple whose sum equals the inputted integer or
-- Nothing if there doesn't exist such a triple.
pythagoreanTripleBoundSum  :: (Integral a) => a -> Maybe [a]
pythagoreanTripleBoundSum n
    | v == []   = Nothing
    | otherwise = Just $ pythagoreanTriple s t
        where (m, l, u, j, k, v, s, t) = (fromIntegral n::Double, ceiling ((sqrt
                                         (2 * m + 1) + 1) / 2), floor ((sqrt (4
                                         * m + 1) - 1) / 2), if l `mod` 2 == 0
                                         then l + 1 else l, if u `mod` 2 == 0
                                         then u + 1 else u, filter (\ i ->
                                         ceiling m `mod` i == 0) [j, j + 2..k],
                                         head v, ceiling m `div` s - s)

-- |The transpose function transposes the lists inside of a list.
transpose             :: [[a]] -> [[a]]
transpose []           = []
transpose ([]:xss )    = transpose xss
transpose ((x:xs):xss) = (x:[y | (y:_) <- xss]):transpose (xs:[zs | (_:zs) <-
                         xss])

-- |The rowProductMax function returns the largest product of k adjacent numbers
-- in the rows of any shaped grid.
rowProductMax      :: (Num a, Ord a) => Int -> [[a]] -> a
rowProductMax k xss = maximum $ map (\ xs -> if length xs < k then 0 else
                      maximum $ f k xs) xss
    where f = \ i xs -> if length xs < k then [] else product (take i xs):f i
              (drop 1 xs)
    
-- |The columnProductMax function returns the largest product of k adjacent
-- numbers in the columns of any shaped grid.
columnProductMax      :: (Num a, Ord a) => Int -> [[a]] -> a
columnProductMax k xss = rowProductMax k $ transpose xss

-- |The diagonalProductMax function returns the largest product of k adjacent
-- numbers in the diagonals of an n x n grid.
diagonalProductMax      :: (Num a, Ord a) => Int -> [[a]] -> a
diagonalProductMax k xss = maximum [d1, d2, d3, d4]
    where (f, f2, f3, f4, f5, d1, d2, d3, d4) =
                                                (\ (xs, i) -> drop i xs, \ xs ->
                                                reverse xs, columnProductMax, \
                                                yss -> zip yss [0..length (xss
                                                !! 0) - 1], \ yss -> transpose $
                                                drop 1 yss, f3 k $ map f $ f4
                                                xss, f3 k $ map f $ f4 $ map f2
                                                xss, f3 k $ map f $ f4 $ f5 xss,
                                                f3 k $ map f $ f4 $ f5 $ map f2
                                                xss)

-- |The gridProductMax function returns the largest product of k adjacent
-- numbers an n x n grid.
gridProductMax      :: (Num a, Ord a) => Int -> [[a]] -> a
gridProductMax k xss = maximum [rows, columns, diagonals]
    where (rows, columns, diagonals) = (rowProductMax k xss, columnProductMax
                                        k xss, diagonalProductMax k xss)
