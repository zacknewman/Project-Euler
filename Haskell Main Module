module Main where
import ProjectEuler

main :: IO()
main  = do print ((sumConsecNumbers 3 ((999 `div` 3)::Integer) 3 +
                  sumConsecNumbers 5 ((999 `div` 5)::Integer) 5 -
                  sumConsecNumbers 15 ((999 `div` 15)::Integer) 15)::Double)
           print . sum . filter even $ takeWhile (<= 4000000) fibAll
           print . last $ factorization 600851475143
           print $ palindromeProduct 3
           print $ smallestMultiple 20
           print ((sumConsecNumbers 1 (100::Integer) 1 ^ (2::Integer) -
                  sumConsecSquares 1 (100::Integer) 1)::Double)
           print $ allPrimes !! 10000
           print $ digitProduct 3 123456
           print . maybe 0 product $ pythagoreanTripleBoundSum (1000::Integer)
           print . sum $ listPrimes 2000000
           print $ gridProductMax 2 ([[1,2,3],[4,5,6],[7,8,9]]::[[Integer]])
           print $ triangularNumberFactors 500
           print . take 10 . toDigits $ sum [1234567890, 1234567890]
           print $ collatzMaxLength 1000000
           print $ combination 40 20
           print . sum $ toDigits (2 ^ (1000::Integer))
           print $ maxTrianglePath ([[1], [1, 2]]::[[Integer]])
           print $ sundaysFirstOfMonth 0 1901 2000
           print . sum . toDigits $ factorial 100
           print . sum . map (\ (a, b) -> a + b) $ amicablePairs 9999
