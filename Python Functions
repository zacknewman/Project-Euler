from math import ceil, log, floor, sqrt
from itertools import starmap, dropwhile
from functools import reduce

def product(iterable):
    """Return the product of every element in an iterable.
    
    The product of an empty iterable is returned as 0.
    
    >>> product(range(1, 8))
    5040
    """
    j = 1
    for i in iterable:
        j *= i
    return j

def sum_consec_numbers(start, quantity=None, step=1):
    """Return the sum of quantity-number of numbers from start.
    
    The step parameter is defaulted at 1; and if only one positive
    integer argument is entered, then it defaults to calculating the
    sum of the integers 0 to (quantity - 1).
    
    The only parameter that requires a positive integer is quantity.
    The function works for all complex numbers for the start and step
    parameters. The function returns the sum of start, start + step,
    start + 2*step,..., start + (quantity - 1)*step.
    
    >>> sum_consec_numbers(10)
    45.0
    >>> sum_consec_numbers(2, 21, 2)
    462.0
    >>> sum_consec_numbers(complex(e, pi), 5, complex(sqrt(2), pi**2))
    (27.73354476626178+114.44727884256j)
    """
    if quantity is None:
        return sum_consec_numbers(0, start, 1)
    else:
        n = quantity - 1
        return (n + 1)*start + ((n*n + n)*step)/2
    
def fib(n):
    """Generate all Fibonacci number > 0 and <= n.
    
    >>> list(fib(10))
    [1, 1, 2, 3, 5, 8]
    """
    a, b = 0, 1
    while b <= n:
        a, b = b, a + b
        yield a

def factorization(n):
    """Return a list of the prime factorization of n.
    
    This function is a rather simple implementation that can be
    greatly improved (e.g., general number field sieve); consequently
    this function may take a long time to compute if the number exceeds 20 digits.
    In the case of very large integers one must employ sieve theory
    techniques.
    
    >>> factorization(24)
    [2, 2, 2, 3]
    """
    primes = []
    p = 5
    q = 7
    while n % 2 == 0:
        primes.append(2)
        n //= 2
    while n % 3 == 0:
        primes.append(3)
        n //= 3
    while n > 1:
        while n % p == 0:
            primes.append(p)
            n //= p
        while n % q == 0:
            primes.append(q)
            n //= q
        p += 6
        q += 6
        if (p*p > n) and (n > 1):
            primes.append(n)
            break
    return primes

def palindromic_number(n):
    """Test if n is a palindromic number.
    
    >>> palindromic_number(11)
    True
    >>> palindromic_number(1212)
    False
    """
    w = str(n)
    if w == w[::-1]:
        return True
    else:
        return False

def palindrome_product(digits):
    """Return a tuple containing the largest possible palindromic product.
    
    The parameter, digits, is the number of digits the two numbers that
    will be multiplied have. The product of these two numbers is the
    largest possible palindromic number that's a result of multiplying
    any two numbers with that many digits.
    
    >>> palindrome_product(2)
    (99, 91, 9009)
    """
    n = int(10**digits - 1)
    m = int(10**(digits - 1) - 1)
    l = 0
    prod = ()
    for i in range(n, m, -1):
        for j in range(n, m, -1):
            k = i * j
            if palindromic_number(k) and k > l:
                l = k
                prod = (i, j, l)
            else:
                continue
    return prod

def prime(n):
    """Test if n is a prime number.
    
    This is a very simple function; consequently it may take a
    long time to compute if the number exceeds 20 digits.
    In the case of very large integers one must employ sieve theory
    techniques.
    
    >>> prime(19)
    True
    """
    if n == 2 or n == 3:
        return True
    elif n < 2 or (n % 6 != 5 and n % 6 != 1):
        return False
    else:
        j = int(sqrt(n)) + 1
        for i in range(5, j, 6):
            if n % i == 0:
                return False
        for i in range(7, j, 6):
            if n % i == 0:
                return False
        else:
            return True

def prime_generator(n):
    """Generate all unsorted primes <= n.
    
    >>> list(prime_generator(11))
    [2, 3, 5, 11, 7]
    """
    if n < 2:
        pass
    elif n == 2:
        yield 2
    elif n < 5:
        yield 2
        yield 3
    else:
        yield 2
        yield 3
        for i in range(5, n + 1, 6):
            if prime(i):
                yield i
        for i in range(7, n + 1, 6):
            if prime(i):
                yield i               

def smallest_multiple(n):
    """Return the smallest multiple of all numbers from 1 to n.
    
    >>> smallest_multiple(10)
    2520
    """
    primes = prime_generator(n)
    multiples = []
    for p in primes:
        q = int(p**(log(n)//log(p)))
        multiples.append(q)
    return product(multiples)

def sum_consec_squares(start, quantity=None, step=1):
    """Return the sum of quantity-number of squares from start.
    
    The step parameter is defaulted at 1; and if only one positive
    integer argument is entered, then it defaults to calculating the
    sum of squares of the integers 0 to (quantity - 1).
    
    The only parameter that requires a positive integer is quantity.
    The function works for all complex numbers for the start and step
    parameters. The function returns the sum of squares of start, start + step,
    start + 2*step,..., start + (quantity - 1)*step.
    
    >>> sum_consec_squares(10)
    285.0
    >>> sum_consec_squares(2, 21, 2)
    13244.0
    >>> sum_consec_squares(complex(e, pi), 5, complex(sqrt(2), pi**2))
    (-3417.916385573686+1548.2863897781j)
    """
    if quantity is None:
        return sum_consec_squares(0, start, 1)
    else:
        n = quantity - 1
        return ((n + 1)*start*start + (n*n + n)*start*step + ((2*n**3 + 3*n*n +
                n)*step*step)/6)

def prime_number(n):
    """Return the nth prime number (indexed from 0).
    
    The function returns the nth prime integer (indexed from 0).
    The function takes some time to run, so integers larger than 1000000
    shouldn't be used.
    
    >>> prime_number(3)
    7
    """
    if n == 0:
        return 2
    elif n == 1:
        return 3
    else:
        p = 5
        q = 7
        i = 1
        while i < n:
            if prime(p):
                i += 1
            if prime(q):
                i += 1   
            p += 6
            q += 6
        if i == n and prime(q - 6):
            return q - 6
        else:
            return p - 6

def digit_product(n, m):
    """Return the largest product of m consecutive digits in n.
    
    A tuple containing the m digits as well as its product is returned.
    
    >>> digit_product(12345, 2)
    (4, 5, 20)
    """
    w = list(str(n))
    digits = []
    p = 0
    l = len(w)
    for i in w:
        digits.append(int(i))
    for i in range(l - m + 1):
        d = digits[i : i + m]
        j = product(d)
        if j > p:
            p = j
            d.append(p)
            answer = tuple(d)
    return answer

def pythagorean_triple_bound(n):
    """Return the Pythagorean triple whose sum is equal to n.
    
    A tuple containing the triple is returned; if there exists no such
    triple, then None is returned.
    
    >>> pythagorean_triple_bound(12)
    (3, 4, 5)
    >>> pythagorean_triple_bound(10)
    """
    u = int((sqrt(4*n + 1) - 1)/2) + 1
    if u % 2 != 0:
        u -= 1
    l = ceil((sqrt(2*n + 1) + 1)/2)
    if l % 2 == 0:
        l += 1
    for i in range(l, u, 2):
        if n % i == 0:
            j = n//i - i
            return (i*j, (i*i - j*j)//2, (i*i + j*j)//2)
    else:
        return None
        
def grid_product(rows: [float], k: int) -> float:
    """Return the largest product of k adjacent numbers in an n x n grid.
    
    The grid must be inputted as a list of lists, i.e., a list of the rows
    of the grid which are lists themselves.
    
    >>> grid_product([[pi, 4, 6], [e, 2, 9], [11, sqrt(2), 0.2]], 2)
    54
    """
    n = len(rows[0])
    columns = zip(*rows)
    diagonals1 = []
    diagonals2 = []
    diagonals3 = []
    diagonals4 = []
    products = []
    seq = []
    for j in range(n - k + 1):
        for i in range(n - j):
            seq.append(rows[i][i + j])
        diagonals1.append(seq)
        seq = []
    for j in range(n - k):
        for i in range(n - 1, j, -1):
            seq.append(rows[i][i - j - 1])
        diagonals2.append(seq)
        seq = []
    for j in range(n - 1, 2, -1):
        for i in range(j + 1):
            seq.append(rows[i][j - i])
        diagonals3.append(seq)
        seq = []
    for j in range(1, n - k + 1):
        for i in range(j, n):
            seq.append(rows[i][n - 1 + j - i])
        diagonals4.append(seq)
    for i, j in enumerate(rows):
        for l in range(n - k + 1):
            products.append(product(j[l : l + k]))
    for i, j in enumerate(columns):
        for l in range(n - k + 1):
            products.append(product(j[l : l + k]))
    for i, j in enumerate(diagonals1):
        for l in range(n - k + 1 - i):
            products.append(product(j[l : l + k]))
    for i, j in enumerate(diagonals2):
        for l in range(n - k - i):
            products.append(product(j[l : l + k]))
    for i, j in enumerate(diagonals3):
        for l in range(n - k + 1 - i):
            products.append(product(j[l : l + k]))
    for i, j in enumerate(diagonals4):
        for l in range(n - k - i):
            products.append(product(j[l : l + k]))
    return max(products)
    
def potential_highly_composite(primes, lower, upper, divisors, length,
                               exponents=[], depth=0):
    """Return all potential highly composite numbers bounded by length.
    
    The function is really only useful in that it is used recursively by
    another function "highly_composite_number" to calculate the highly composite
    numbers. This function's sole purpose is to create all potential highly
    composite numbers with at least an inputted number of divisors (the
    "divisors" parameter). The primes parameter is the list of primes that
    will be used to construct the list of potential numbers.The lower and
    upper parameters are the lower and upper bounds of the exponent for 2
    respectively. The length parameter is the number of unique primes in
    the potential highly composite number. This function employs known facts
    about the necessary forms of highly composite numbers most famously proven
    by Srinivasa Ramanujan.
    
    >>> potential_highly_composite([2,3,5,7,11], 1, 3, 6, 2)
    [30, 60, 180, 120, 360, 1080]
    """
    potential = []
    if depth == length:
        exponents.append(1)
        mult = reduce(lambda x, y: x*(y + 1), exponents, 1)
        if mult >= divisors:
            prim = zip(primes[:-1],exponents)
            val = list(starmap(pow, prim))
            hcn = product(val)
            potential.append(hcn)
    else:
        for i in range(lower, upper + 1):
            lower = floor(log(primes[length])/log(primes[depth + 1]))
            upper = min(i, 2*ceil(log(primes[length + 1])/log(primes[depth +
                        1])) - 1)
            new_exponents = exponents + [i]
            potential.extend(potential_highly_composite(primes, lower, upper,
                             divisors, length, exponents=new_exponents, depth=depth+1))
    return potential

def highly_composite_number(n):
    """Return the minimum highly composite number with at least n divisors.
    
    >>> highly_composite_number(8)
    24
    """
    if n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 4
    elif n == 9:
        return 36
    else:
        m = floor(log(n)/log(2))
        primes = list(map(prime_number, range(m + 1)))
        potential = []
        potential2 = []
        for i in range(1,m):
            l = floor(log(primes[i])/log(2))
            u = 2*ceil(log(primes[i + 1])/log(2)) - 1
            hcn = potential_highly_composite(primes, l, u, n, i)
            potential.append(hcn)
        for i in potential:
            if i == []:
                continue
            else:
                potential2.append(min(i))
        return min(potential2)

def triangular_number_factors(n):
    """Return the first triangular number that has more than n factors.
    
    The function first uses the "highly_composite_number" function
    to determine the minimum possible size of the triangular number
    before looping to find the result.
    
    >>> triangular_number_factors(10)
    120
    """
    hcn = highly_composite_number(n)    
    start = ceil((sqrt(1 + 8*hcn) - 1)/2) + 1
    ys = factorization(start)
    while True:
        xs, ys = ys, factorization(start + 1)
        primes = xs + ys
        primes.sort()
        j = primes.count(2)
        oddprimes = dropwhile(lambda x: x == 2, primes)
        unique = set(oddprimes)
        for i in unique:
            j *= primes.count(i) + 1
        if j > n:
            return start*(start + 1)//2
        else:
            start += 1
